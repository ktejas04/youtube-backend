Images will be stored using third-party services
AWS, Azure, Cloudinary.
We first store it in our server to prevent data loss and then pass it to ...


nodemon - utility to restart server whenever the code is changed and saved. it is a dev dependency, meaning it is used during development and not shipped to production.

// "test": "echo \"Error: no test specified\" && exit 1"

removed this line. check?? 

create controllers,db,middleware,models,routes,utils in src

setup prettierrc and prettierignore

connecting DB - mongodb atlas
a sub-service of mongodb where they provide online db

create cluster, make env variables and copy paste uri

write db_name

install express, mongoose, and dotenv

advice - db connections can give errors.
1.always wrap them in try catch/ use promises.
2.db processing takes time(asynchronous). use async await.

diff methods of writing code of connecting db

add dotenv to dev in package.json

import cookie-parser, cors
.use() - when using middleware/ configuration settings
in index.js we will write app.use(cors())

some settings are reqd, - data will be coming from multiple sources, json, url, forms

configure json,url,static and cookie-parser
Middleware - Just a middle man to check if you are eligible/capable of seeing/storing the response

in get, earlier we had only req and res but actually it is err,req,res,next.
next is just a flag to pass the step to next step

study asyncHandler.js

we want to overwrite nodejs api error to customize ad standardize it, so that we don't have to remember everything

create ApiError, ApiResponse

Now we do modelling of user and video
create their model files

mongodb saves id in bson

in video.model.js, we are using
aggregation pipeline (mongodb) - study
after using this we can write aggregation queries instead of just regular queries

install bcypt - a library to hash pwds.
We are using middleware "pre" to has the password(encrypt it) before storing in DB. For this we are using bcrypt.hash()

We can also make/inject methods like middlewares

JWT - a bearer token, whoever has it can request and get data

update .env file with access and refresh tokens.
write their methods in user.model.js and use jwt.sign 

Now we will learn about file upload - photo, video, pdf, etc.
File uploading will not be present in every endpoint. For example, we may need photo upload in register, but never in login

We will use Cloudinary and Multer for file uploading
We are using Multer for file upload, keeps file from user to our local server temporarily.Cloudinary is SDK(just a service) like AWS. It will take file from local storage(our server) and upload it to the main server.

Write Cloudinary.js.
import cloudinary and fs. 
write cloudinary env variables and code for file upload.

Write multer middleware.
Study docs

HTTP - study

Now we will write controllers
write user.controller.js

Now create routes
create register route, login can be done later
for now there is no middleWare, we are directly calling registerUser

Next we actually register a user
In user.controller.js, think about the steps of registering an user, the diff possible cases
req.body is provided by express
study req.body, print the data, check in postman(POST)

in routes, write middleware using upload(multer)
write whatever fields you want to take input in, for now avatar and coverImage

now in controller, check for valid data
check for duplicate user.
multer provides us with req.files

for rest steps, check controller file comments.

raw option - for text data only.
for files, use form-data

use await in .findOne

the response.url has the public id attribute of cloudinary

id is auto-generated by mongodb in bson.
password has been encrypted

now in cloudinary, unlink the file's path after it has been uploaded.
console log response, req.body, req.files

since cookie is 2-way, we can also access req.cookie
cookieParser is middleware

ACCESS and REFRESH tokens

Access - short-lived, 1day. After 1 day, user will have to re-enter loginID pwd and geberate new access token
Refresh - session storage
study more

We have to provide api endpoint to frontend developer from where he can refresh the tokens
Add controller for that

Create subscription model

Keep seperate controllers and endpoints for file updations.

TODO - Add controller for deleting old avatar image

Subscription Schema
For counting subscribers, select channels and count subscriber document number.
For no of channels, select user and count channel documents number


Study aggregration pipelines

req.user._id - gives us the string value of id, the literal value. as we use mongoose, it self-adds ObjectID() to it.

Check sub-pipeline on different positions